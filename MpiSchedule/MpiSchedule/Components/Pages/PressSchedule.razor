@page "/press-schedule"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Microsoft.EntityFrameworkCore
@using MpiSchedule.Data
@inject IDbContextFactory<PressScheduleContext> DbFactory
@inject IModalService Modal

<PressDropdown ValueChanged="OnValueChanged" />

<br />

<MonthlyCalendar TModel="PressJob"
                 Values="jobList"
                 ValueClick="ValueClick"
                 GetStartDate="job => job.Date"
                 GetValueContent="job => job.Name"
                 GetBackgroundColor="job => BackgroundColorForShift(job.Shift)"
                 GetForegroundColor="job => ForegroundColorForShift(job.Shift)" />

@code
{
    private readonly DateTime today = DateTime.Today;

    private readonly List<PressJob> jobList = [];

    private Press? selectedPress;

    private async Task OnValueChanged(Press? press)
    {
        jobList.Clear();

        await using var db = await DbFactory.CreateDbContextAsync();

        selectedPress = press;


        if (selectedPress is not null)
        {
            db.Attach(selectedPress);
            if (selectedPress is { PressId: 7, Jobs.Count: 0 })
            {
                var firstShiftJob = new PressJob { Date = today.AddDays(0), Name = "Test job 1", DueDate = today.AddDays(5), JobNumber = "3333333-1", Quantity = 20000, QuantityRan = 0, Shift = Shift.First };
                var secondShiftJob = new PressJob { Date = today.AddDays(0), Name = "Test job 2", DueDate = today.AddDays(5), JobNumber = "3333333-2", Quantity = 20000, QuantityRan = 0, Shift = Shift.Second };
                var thirdShiftJob = new PressJob { Date = today.AddDays(0), Name = "Test job 3", DueDate = today.AddDays(5), JobNumber = "3333333-3", Quantity = 20000, QuantityRan = 0, Shift = Shift.Third };

                selectedPress.Jobs.AddRange([firstShiftJob, secondShiftJob, thirdShiftJob]);

                await db.SaveChangesAsync();
            }

            jobList.AddRange(selectedPress.Jobs.OrderBy(x => x.Shift));
        }
    }

    private async Task ValueClick(PressJob job)
    {
        await using var db = await DbFactory.CreateDbContextAsync();

        await db.Attach(job).Reference(j => j.Press).LoadAsync();

        var parameters = new ModalParameters().Add(nameof(PressJobInfoModal.Job), job);

        Modal.Show<PressJobInfoModal>("Job Info", parameters);
    }

    private static string BackgroundColorForShift(Shift shift) => shift switch
    {
        Shift.First => "#2dc937",
        Shift.Second => "#e7b416",
        Shift.Third => "#cc3232",
        _ => "#000000",
    };

    private static string ForegroundColorForShift(Shift shift) => shift switch
    {
        Shift.First or Shift.Second => "#000000",
        _ => "#FFFFFF",
    };
}