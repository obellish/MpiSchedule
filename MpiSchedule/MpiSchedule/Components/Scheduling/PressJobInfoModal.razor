@using MpiSchedule.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
<div>
    <p>Name: <code>@Job.Name</code></p>

    <br />

    <p>Job Number: <code>@Job.JobNumber</code></p>

    <br />

    <p>Scheduled to run: <code>@Job.Date.Date.ToString("MM/dd/yyyy")</code> on <code>@Shift</code> shift</p>

    <br />

    <p>Quantity: <code>@Job.Quantity</code></p>

    <br />

    <p>Quantity already ran: <code>@Job.QuantityRan</code></p>

    <br />

    <p>Due date: <code>@Job.DueDate.Date.ToString("MM/dd/yyyy")</code></p>
    
    <p>Authenticated: @Authenticated</p>
    
    <button class="btn btn-primary" @onclick="CloseCommand">Close</button>
</div>

@code
{
    [Parameter]
    public PressJob Job { get; set; }

    [Parameter]
    public EventCallback CloseCommand { get; set; }

    private bool Authenticated { get; set; }

    private string Shift => Job.Shift switch
    {
        Data.Shift.First => "First",
        Data.Shift.Second => "Second",
        Data.Shift.Third => "Third",
    };

    protected override async Task OnInitializedAsync()
    {
        Authenticated = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity?.IsAuthenticated ?? false;
    }
}