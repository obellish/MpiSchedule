@using Microsoft.AspNetCore.Components.Forms
@using MpiSchedule.Client.Http
@using MpiSchedule.Client.Models
@inject PressHttpClient Http

<PageTitle>@Mode Job</PageTitle>

<h2>@Mode Job</h2>
<br />

@if (Job is not null)
{
    <EditForm Model="Job"
              FormName="JobEditor"
              OnInvalidSubmit="async () => await HandleSubmitAsync(false)"
              OnValidSubmit="async () => await HandleSubmitAsync(true)">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <p>
            <label>
                Job name:
                <InputText @bind-Value="Job.Name" />
            </label>
        </p>
        <p>
            <label>
                Job number:
                <InputText @bind-Value="Job.JobNumber" />
            </label>
        </p>
        <p>
            <label>
                Press:
                <InputSelect @bind-Value="Job.PressId">
                    @if (presses is not null)
                    {
                        @foreach (var press in presses)
                        {
                            <option value="@press.PressId">@press.Name</option>
                        }
                    }
                </InputSelect>
            </label>
        </p>
        <p>
            <label>
                Scheduled to run:
                <InputDate @bind-Value="Job.Date" />
            </label>
        </p>
        <p>
            <label>
                Due date:
                <InputDate @bind-Value="Job.DueDate" />
            </label>
        </p>
        <p>
            <label>
                Quantity:
                <InputNumber @bind-Value="Job.Quantity" />
            </label>
        </p>
        <p>
            <label>
                Quantity already ran:
                <InputNumber @bind-Value="Job.QuantityRan" />
            </label>
        </p>
        <br />
        @if (!IsAdd)
        {
            <button type="button" disabled="@Busy" class="btn btn-danger" @onclick="DeleteAsync">Delete</button>
            <button type="button" disabled="@Busy" class="btn btn-warning" @onclick="CancelAsync">Cancel</button>
            <button type="submit" disabled="@Busy" class="btn btn-primary">Submit</button>
        }
        else
        {
            <button type="button" disabled="@Busy" class="btn btn-warning" @onclick="CancelAsync">Cancel</button>
            <button type="submit" disabled="@Busy" class="btn btn-primary">Submit</button>
        }
    </EditForm>
}

@code
{
    private List<Press>? presses;

    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    [Parameter]
    public EventCallback CancelRequest { get; set; }

    [Parameter]
    public EventCallback DeleteRequest { get; set; }

    [Parameter]
    public bool IsAdd { get; set; }

    [Parameter]
    public PressJob? Job { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    private string Mode => IsAdd ? "Add" : "Edit";

    protected override async Task OnInitializedAsync() => presses = [.. await Http.GetAllPressesAsync()];

    private Task CancelAsync() => CancelRequest.InvokeAsync();

    private Task HandleSubmitAsync(bool isValid) => ValidationResult.InvokeAsync(isValid);

    private Task DeleteAsync() => DeleteRequest.InvokeAsync();
}
