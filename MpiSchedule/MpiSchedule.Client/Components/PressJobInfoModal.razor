@using MpiSchedule.Client.Models
@using MpiSchedule.Client.Http
@inject PressHttpClient Http
@inject NavigationManager Navigation

<div>
    <p>Name: <code>@Job.Name</code></p>

    <br />

    <p>Job Number: <code>@Job.JobNumber</code></p>

    <br />

    <p>Press: <code>@PressName</code></p>

    <br />

    <p>Scheduled to run: <code>@Job.Date.ToString("MM/dd/yyyy")</code> on <code>@Shift</code> shift</p>

    <br />

    <p>Due date: <code>@Job.DueDate.ToString("MM/dd/yyyy")</code></p>

    <br />

    <p>Quantity: <code>@Job.Quantity</code></p>

    <br />

    <p>Quantity already ran: <code>@Job.QuantityRan</code></p>

    <AuthorizeView Roles="Manager, Developer">
        <Authorized>
            <button class="btn btn-secondary" @onclick="EditJob">Edit</button>
            &nbsp;
        </Authorized>
    </AuthorizeView>
    <button class="btn btn-primary" @onclick="CloseCommand">Close</button>

</div>

@code
{
    private readonly List<Press> presses = [];

    [Parameter]
    public PressJob Job { get; set; }

    [Parameter]
    public EventCallback CloseCommand { get; set; }

    private string PressName => presses.FirstOrDefault(p => p.PressId == Job.PressId)?.Name ?? "Not available";

    private string Shift => Job.Shift switch
    {
        Models.Shift.First => "First",
        Models.Shift.Second => "Second",
        Models.Shift.Third => "Third",
        _ => "Unknown",
    };

    protected override async Task OnInitializedAsync() => presses.AddRange(await Http.GetAllPressesAsync());

    private void EditJob() => Navigation.NavigateTo($"/press-schedule/edit/{Job.Id}");
}
