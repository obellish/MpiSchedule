@using MpiSchedule.Client.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<div>
    <p>Name: <code>@Job.Name</code></p>

    <br />

    <p>Job Number: <code>@Job.JobNumber</code></p>

    <br />

    <p>Scheduled to run: <code>@Job.Date.Date.ToString("MM/dd/yyyy")</code> on <code>@Shift</code> shift</p>

    <br />

    <p>Quantity: <code>@Job.Quantity</code></p>

    <br />

    <p>Quantity already ran: <code>@Job.QuantityRan</code></p>

    <br />

    <p>Due date: <code>@Job.DueDate.Date.ToString("MM/dd/yyyy")</code></p>

    @if (authenticated)
    {
        <div>
            <button class="btn btn-secondary" @onclick="EditJob">Edit</button>
            &nbsp;
            <button class="btn btn-primary" @onclick="CloseCommand">Close</button>
        </div>
    }
    else
    {
        <button class="btn btn-primary" @onclick="CloseCommand">Close</button>
    }

</div>

@code
{
    private bool authenticated;

    [Parameter]
    public PressJob Job { get; set; }

    [Parameter]
    public EventCallback CloseCommand { get; set; }

    private string Shift => Job.Shift switch
    {
        Models.Shift.First => "First",
        Models.Shift.Second => "Second",
        Models.Shift.Third => "Third",
    };

    protected override async Task OnInitializedAsync() => authenticated = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity?.IsAuthenticated is true;

    private void EditJob() => Navigation.NavigateTo($"/press-schedule/edit/{Job.Id}");
}
