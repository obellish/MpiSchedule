@page "/press-schedule/edit/{jobId:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@using MpiSchedule.Client.Http
@using MpiSchedule.Client.Models
@inject ILogger<EditJob> Logger
@inject PressJobHttpClient Http
@inject NavigationManager Navigation
@implements IAsyncDisposable
@attribute [Authorize(Roles = "Admin, Developer")]

@if (Job is null && !busy)
{
    <p>Could not find job with id @JobId.</p>
}
else
{
    <AuthorizeView>
        <PressJobForm Busy="busy"
                      Job="Job"
                      IsAdd="false"
                      CancelRequest="Cancel"
                      DeleteRequest="Delete"
                      ValidationResult="async (success) => await ValidationResultAsync(success)" />

        <ConfirmDialog @ref="dialog" />
    </AuthorizeView>
}

@if (error)
{
    <br />
    <div class="alert alert-danger">Failed to update the job (@errorMessage).</div>
}

@code
{
    private ConfirmDialog? dialog;
    private HubConnection? hubConnection;
    private bool busy;
    private bool error;
    private string errorMessage = string.Empty;

    [Parameter]
    public int JobId { get; set; }

    private PressJob? Job { get; set; }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        busy = true;

        try
        {
            Job = await Http.GetJobAsync(JobId);

        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to fetch entry");
            errorMessage = ex.Message;
            error = true;
        }
        finally
        {
            busy = false;
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/refresh-schedule"))
            .Build();

        await hubConnection.StartAsync();
    }

    private async Task Delete()
    {
        var confirmation = await dialog?.ShowAsync(title: "Delete job", message1: "Are you sure you want to delete this job?")!;

        if (confirmation)
        {
            busy = true;
            await Http.DeleteJobAsync(JobId);
            var navigationUrl = "/press-schedule";
            if (Job is not null)
            {
                navigationUrl += $"?pressId={Job.PressId}";
            }

            Navigation.NavigateTo(navigationUrl);
        }
    }

    private void Cancel()
    {
        busy = true;
        var navigationUrl = "/press-schedule";
        if (Job is not null)
        {
            navigationUrl += $"?pressId={Job.PressId}";
        }

        Navigation.NavigateTo(navigationUrl);
    }

    private async Task ValidationResultAsync(bool success)
    {
        if (busy)
        {
            return;
        }

        if (!success)
        {
            error = false;
            return;
        }

        busy = true;
        var navigationUrl = "/press-schedule";
        if (Job is not null)
        {
            navigationUrl += $"?pressId={Job.PressId}";
        }

        try
        {
            if (Job is not null)
            {
                await Http.EditJobAsync(Job);
            }

            await hubConnection?.SendAsync("EditJob", Job?.PressId ?? 0, JobId)!;

            Navigation.NavigateTo(navigationUrl);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to update entry");
            error = true;
            errorMessage = ex.Message;
        }
        finally
        {
            busy = false;
        }
    }
}
