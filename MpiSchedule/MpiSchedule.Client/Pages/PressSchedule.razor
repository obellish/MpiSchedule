@page "/press-schedule"
@using MpiSchedule.Client.Models
@using MpiSchedule.Client.Http
@using Microsoft.AspNetCore.SignalR.Client
@inject PressHttpClient Http
@inject PressJobHttpClient JobHttp
@inject NavigationManager Navigation
@inject ToastService Toast
@implements IAsyncDisposable

<PageTitle>Schedule</PageTitle>

<h2>Schedule</h2>

<div>
    <PressDropdown Value="selectedPress" ValueChanged="OnValueChanged" />

    <AuthorizeView Roles="Manager, Developer">
        <button class="btn btn-secondary" @onclick="AddJob">Add job</button>
    </AuthorizeView>
</div>

<br />

<MonthlyCalendar TModel="PressJob"
                 Values="jobList"
                 ValueClick="ValueClick"
                 GetStartDate="job => job.Date"
                 GetValueContent="job => job.Name"
                 GetBackgroundColor="BackgroundColorForJob"
                 GetForegroundColor="ForegroundColorForJob" />

<Modal @ref="modal" />

<ConfirmDialog @ref="dialog" />

@code
{
    private readonly DateTime today = DateTime.Today;
    private readonly List<PressJob> jobList = [];
    private HubConnection? hubConnection;
    private Modal? modal;
    private ConfirmDialog? dialog;
    private Press? selectedPress;

    [SupplyParameterFromQuery(Name = "pressId")]
    private int PressId { get; set; }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/refresh-schedule"))
            .Build();

        hubConnection.On<int, int>("AddJob", 
            async (pressId, jobId) =>
        {
            if (await RefreshState(pressId))
            {
                var job = await JobHttp.GetJobAsync(jobId);

                if (job is not null)
                {
                    Toast.Notify(new ToastMessage { Type = ToastType.Primary, Title = "New job created", HelpText = $"{job.Date:MM/dd/yyyy}", Message = $"Job {job.JobNumber} created" });
                }
            }
        });

        hubConnection.On<int, int>("EditJob", async (pressId, jobId) =>
        {
            if (await RefreshState(pressId))
            {
                var job = await JobHttp.GetJobAsync(jobId);

                if (job is not null)
                {
                    Toast.Notify(new ToastMessage { Type = ToastType.Info, Title = "Job edited", HelpText = $"{job.Date:MM/dd/yyyy}", Message = $"Job {job.JobNumber} edited" });
                }
            }
        });

        await hubConnection.StartAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (PressId is not 0)
        {
            var press = await Http.GetPressAsync(PressId, true);

            await OnValueChanged(press);
        }
    }

    private static string BackgroundColorForJob(PressJob job) => job.Shift switch
    {
        Shift.First => "#2dc937",
        Shift.Second => "#e7b416",
        Shift.Third => "#cc3232",
        _ => "#000000",
    };

    private static string ForegroundColorForJob(PressJob job) => job.Shift switch
    {
        Shift.First or Shift.Second => "#000000",
        _ => "#ffffff",
    };

    private async Task OnValueChanged(Press? press)
    {
        jobList.Clear();

        selectedPress = press;

        if (selectedPress is not null)
        {
            if (selectedPress is { PressId: 7, Jobs.Count: 0 })
            {
                await JobHttp.CreateJobAsync(new PressJob { Date = DateTime.Today, JobNumber = "3333333-1", Name = "Test Job 1", PressId = 7, Quantity = 20000, Shift = Shift.First });
                await JobHttp.CreateJobAsync(new PressJob { Date = DateTime.Today, JobNumber = "3333333-2", Name = "Test Job 2", PressId = 7, Quantity = 20000, Shift = Shift.Second });
                await JobHttp.CreateJobAsync(new PressJob { Date = DateTime.Today, JobNumber = "3333333-3", Name = "Test Job 3", PressId = 7, Quantity = 20000, Shift = Shift.Third });

                var newPress = await Http.GetPressAsync(7, true);

                await OnValueChanged(newPress);
            }

            jobList.AddRange(selectedPress.Jobs.OrderBy(x => x.Shift).Where(j => j.Date.Month == today.Month));
        }
    }

    private async Task AddJob()
    {
        if (selectedPress is null)
        {
            return;
        }

        var confirmation = await dialog?.ShowAsync(title: "Add a job", message1: $"Would you like to add a job")!;

        if (confirmation)
        {
            Navigation.NavigateTo($"/press-schedule/add?pressId={selectedPress.PressId}&date={DateTime.Today}");
        }
    }

    private async Task ValueClick(PressJob job)
    {
        var parameters = new Dictionary<string, object>
        {
            { nameof(PressJobInfoModal.Job), job },
            { nameof(PressJobInfoModal.CloseCommand), EventCallback.Factory.Create(this, CloseModal) },
        };

        await modal?.ShowAsync<PressJobInfoModal>(title: "Job Info", parameters: parameters)!;
    }

    private async Task CloseModal() => await modal?.HideAsync()!;

    private async Task<bool> RefreshState(int pressId)
    {
        if (selectedPress?.PressId == pressId || PressId == pressId)
        {
            var press = await Http.GetPressAsync(pressId, true);

            await OnValueChanged(press);

            StateHasChanged();

            return true;
        }

        return false;
    }
}
